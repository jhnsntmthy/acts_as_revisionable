= Acts As Revisionable

This plugin will automatically keeps revisions of a model each time it is updated. It is intended to allow you to keep a history of record changes that can be reviewed or restored. The functionality is very similar to that offered by the ActsAsVersioned[http://wiki.rubyonrails.org/rails/pages/ActsAsVersioned] plugin. However the implementation is quite different with several advantages for some applications. Associations can also be versioned from the main record and the storage implementation is simpler and requires less space from your database.

To make any ActiveRecord model revisionable, simply declare acts_as_revisionable in the class definition. This will hook in to the update method so that every time a record is updated to the database, the previous version will be save to a revision_records table. Because the hook is only on update newly created records don't have revision. This is intentional to reduce the number of revisions that need to be kept. In many applications, the majority of records are created once and never edited and adding the revision on create ends up at least doubling your storage needs. The attributes of the original record are serialized and compressed for storage in the revision record again to minimize the amount of disk space used. Finally, you can limit the number of associations that are kept at any one time by supplying a :limit option to the acts_as_revisionable statement:

  acts_as_revisionable :limit => 25

You can insure that revisions are kept for a minimum length of time by specifying :minimum_age:

  acts_as_revisionable :limit => 15, :minimum_age => 2.weeks

Revisions are accessible on a record via a revision_records has_many association. The revision records are sorted in reverse order. The revisions will be destroyed along with the parent record.

== Associations

You can specify associations that you'd like to include in each revision by providing a list of them with the :associations key to the acts_as_revisionable options hash. You can either provide a symbol with the association name or, if you'd like to include sub-associations, a hash with the association name as the key and the value as a list of sub-associations to include. These are are valid :associations values:

  :associations => :comments  # include has_many :comments in the revision
  :associations => [:comments, :tags]  # include both :comments and :tags
  :associations => [{:comments => :ratings}, :tags]  # include both :comments and :tags as well as has_many :ratings on the comments

You can only revision has_many, has_one, and has_and_belongs_to_many associations. You cannot revision belongs_to.

== Restoring Revisions

You can restore revisions into an object in memory by calling restore_revision with the revision number. This will return a new object with all the attributes and associations restored from the revision record. The object will not have been saved yet to the database. If any errors were encountered restoring an attribute or association, an error will be added to the record errors. This should make it easy to reuse the model's edit interface for restoring the revision.

== Migration

A migration is included in the migrations directory which must be run before using this plugin.

== Destroying

Since the revision history of a record is destroyed along with the record, you could be at risk of losing your revision history. However, this plugin was developed as a companion to the ActsAsTrashable[http://actsastrashable.rubyforge.org/] plugin. With this plugin, you can store destroyed records for a set period along with all dependent associations. Both plugins use similar code and interfaces. It is recommended that you always use ActsAsTrashable along side of ActsAsRevisioned.
